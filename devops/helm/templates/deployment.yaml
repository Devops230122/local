apiVersion: v1
kind: Service
metadata:
    name: {{ .Release.Name }}
spec:
    type: ClusterIP
    ports:
      - port: {{ .Values.ports.servicePort }}
        targetPort: {{ .Values.ports.targetPort }}
    selector:
      app: {{ .Release.Name }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      annotations: 
        rollme: {{ randAlphaNum 5 | quote }}
      labels:
        app: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.image }}:{{ .Values.tag }} 
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
            - containerPort: {{ .Values.ports.containerPort }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readinessProbePath }}
              port: {{ .Values.ports.containerPort }}
            initialDelaySeconds: {{ .Values.probes.readinessinitialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.livenessProbePath }}
              port: {{ .Values.ports.containerPort }}
            initialDelaySeconds: {{ .Values.probes.livenessinitialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}   
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 20"] 
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory}}
            # limits: 
            #   cpu: {{ .Values.resources.limits.cpu }}
            #   memory: {{ .Values.resources.limits.memory }}  //this one is deprecated until memory garbage collector will be fixed          
          volumeMounts:
            - name: {{ $.Values.keyVaultName  | quote }}
              mountPath: "/mnt/secrets-store"
              readOnly: true
          env:
            - name: AZURE_COSMOS_DB_NAME
              value: {{ .Values.AZURE_COSMOS_DB_NAME }}
            - name: APPLICATIONINSIGHTS_CONFIGURATION_FILE
              value: applicationinsights.json
            - name: AZURE_SERVICE_BUS_TOPIC_NAME
              value: {{ .Values.AZURE_SERVICE_BUS_TOPIC_NAME}}
            - name: AZURE_SERVICE_BUS_NAME_SPACE_NAME
              value: {{ .Values.AZURE_SERVICE_BUS_NAME_SPACE_NAME}}
            - name: AZURE_SERVICE_BUS_TOPIC_SUBSCRIPTION_NAME
              value: {{ .Values.AZURE_SERVICE_BUS_TOPIC_SUBSCRIPTION_NAME}}
            - name: AZURE_SERVICE_BUS_TOPIC_SHARED_POLICY_NAME
              value: {{ .Values.AZURE_SERVICE_BUS_TOPIC_SHARED_POLICY_NAME}}
            - name: ENDPOINTS_LOGGING_ENABLED
              value: '{{ .Values.ENDPOINTS_LOGGING_ENABLED }}'
            - name: ENDPOINTS_LOGGING_INCLUDE_METHOD_ARG
              value: '{{ .Values.ENDPOINTS_LOGGING_INCLUDE_METHOD_ARG }}'
            {{ range $v :=  .Values.secrets }}
            - name: {{ regexReplaceAll "\\W+" $v "_"  | quote}}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.keyVaultName  | quote }}
                  key: {{ $v }}
            {{ end }}
      volumes:
        - name: {{ $.Values.keyVaultName  | quote }}
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.keyVaultName  | quote }}
